[gd_scene load_steps=10 format=3 uid="uid://ky0mvp84vdvf"]

[ext_resource type="PackedScene" uid="uid://dlw2yigievwho" path="res://VFX/Fire_Medium.tscn" id="1_gbf77"]
[ext_resource type="Texture2D" uid="uid://b2qelqhcstttp" path="res://VFX/SmokeScaleCurve.tres" id="2_ill44"]
[ext_resource type="Shader" uid="uid://jcn44qg3x24i" path="res://VFX/FlipbookProcess.tres" id="2_inwc2"]

[sub_resource type="Curve" id="Curve_fxkya"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.806005, 0.60262), -1.67869, -1.67869, 0, 0, Vector2(1, 0.443668), -4.32527, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_gyw80"]
curve = SubResource("Curve_fxkya")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7t2qm"]
shader = ExtResource("2_inwc2")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 46.44
shader_parameter/flatness = 0.0
shader_parameter/inherit_emitter_velocity_ratio = 0.0
shader_parameter/initial_linear_velocity_min = 0.0
shader_parameter/initial_linear_velocity_max = 0.0
shader_parameter/directional_velocity_min = 1.0
shader_parameter/directional_velocity_max = 1.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/radial_velocity_min = null
shader_parameter/radial_velocity_max = 1.05
shader_parameter/linear_accel_min = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_min = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/scale_min = 1.2
shader_parameter/scale_max = 1.4
shader_parameter/hue_variation_min = 0.0
shader_parameter/hue_variation_max = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/anim_offset_max = 1.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/emission_sphere_radius = 0.2
shader_parameter/emission_shape_offset = Vector3(0, 0, 0)
shader_parameter/emission_shape_scale = Vector3(5.67, 8.465, 4.715)
shader_parameter/velocity_pivot = Vector3(0, 0, 0)
shader_parameter/color_value = Color(4, 3, 1, 1)
shader_parameter/gravity = Vector3(0, 3, 0)
shader_parameter/turbulence_noise_strength = 0.1
shader_parameter/turbulence_noise_scale = -0.107
shader_parameter/turbulence_influence_min = 0.008
shader_parameter/turbulence_influence_max = 0.038
shader_parameter/turbulence_initial_displacement_min = 0.0
shader_parameter/turbulence_initial_displacement_max = 0.0
shader_parameter/turbulence_noise_speed_random = 0.08
shader_parameter/turbulence_noise_speed = Vector3(0, 0.1, 0)
shader_parameter/scale_curve = SubResource("CurveTexture_gyw80")

[sub_resource type="Shader" id="Shader_8kpqr"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's ParticleProcessMaterial.

shader_type particles;
render_mode disable_velocity;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float inherit_emitter_velocity_ratio = 0;
uniform float initial_linear_velocity_min;
uniform float initial_linear_velocity_max;
uniform float directional_velocity_min;
uniform float directional_velocity_max;
uniform float angular_velocity_min;
uniform float angular_velocity_max;
uniform float orbit_velocity_min;
uniform float orbit_velocity_max;
uniform float radial_velocity_min;
uniform float radial_velocity_max;
uniform float linear_accel_min;
uniform float linear_accel_max;
uniform float radial_accel_min;
uniform float radial_accel_max;
uniform float tangent_accel_min;
uniform float tangent_accel_max;
uniform float damping_min;
uniform float damping_max;
uniform float initial_angle_min;
uniform float initial_angle_max;
uniform float scale_min;
uniform float scale_max;
uniform float hue_variation_min;
uniform float hue_variation_max;
uniform float anim_speed_min;
uniform float anim_speed_max;
uniform float anim_offset_min;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec3 emission_shape_offset = vec3(0.);
uniform vec3 emission_shape_scale = vec3(1.);
uniform vec3 velocity_pivot = vec3(0.);
uniform float emission_sphere_radius;
uniform vec4 color_value : source_color;
uniform vec3 gravity;
uniform sampler2D scale_curve : repeat_disable;
vec4 rotate_hue(vec4 current_color, float hue_rot_angle){
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	return hue_rot_mat * current_color;
}


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

struct DisplayParameters{
	vec3 scale;
	float hue_rotation;
	float animation_speed;
	float animation_offset;
	float lifetime;
	vec4 color;
};

struct DynamicsParameters{
	float angle;
	float angular_velocity;
	float initial_velocity_multiplier;
	float directional_velocity;
	float radial_velocity;
	float orbit_velocity;
};
struct PhysicalParameters{
	float linear_accel;
	float radial_accel;
	float tangent_accel;
	float damping;
};

void calculate_initial_physical_params(inout PhysicalParameters params, inout uint alt_seed){
	params.linear_accel = mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed));
	params.radial_accel = mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed));
	params.tangent_accel = mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	params.damping = mix(damping_min, damping_max, rand_from_seed(alt_seed));
}

void calculate_initial_dynamics_params(inout DynamicsParameters params,inout uint alt_seed){
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	params.angle = mix(initial_angle_min, initial_angle_max, rand_from_seed(alt_seed));
	params.angular_velocity = mix(angular_velocity_min, angular_velocity_max, rand_from_seed(alt_seed));
	params.initial_velocity_multiplier = mix(initial_linear_velocity_min, initial_linear_velocity_max,rand_from_seed(alt_seed));
	params.directional_velocity = mix(directional_velocity_min, directional_velocity_max,rand_from_seed(alt_seed));
	params.radial_velocity = mix(radial_velocity_min, radial_velocity_max,rand_from_seed(alt_seed));
	params.orbit_velocity = mix(orbit_velocity_min, orbit_velocity_max,rand_from_seed(alt_seed));
}
void calculate_initial_display_params(inout DisplayParameters params,inout uint alt_seed){
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
   params.scale = vec3(mix(scale_min, scale_max, rand_from_seed(alt_seed)));
   params.scale = sign(params.scale) * max(abs(params.scale), 0.001);
	params.hue_rotation =  pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	params.animation_speed = mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	params.animation_offset = mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed));
	params.lifetime = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	params.color = color_value;
}
void process_display_param(inout DisplayParameters parameters, float lifetime){
	// compile-time add textures
	parameters.scale *= texture(scale_curve, vec2(lifetime)).rgb;
	parameters.color = rotate_hue(parameters.color, parameters.hue_rotation);
}
vec3 calculate_initial_position(inout uint alt_seed) {
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	vec3 pos = vec3(0.);
		float s = rand_from_seed(alt_seed) * 2.0 - 1.0;
		float t = rand_from_seed(alt_seed) * 2.0 * pi;
		float p = rand_from_seed(alt_seed);
		float radius = emission_sphere_radius * sqrt(1.0 - s * s);
		pos = mix(vec3(0.0, 0.0, 0.0), vec3(radius * cos(t), radius * sin(t), emission_sphere_radius * s), p);
	return pos * emission_shape_scale + emission_shape_offset;
}

vec3 get_random_direction_from_spread(inout uint alt_seed, float spread_angle){
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	vec3 velocity = vec3(0.);
	float spread_rad = spread_angle * degree_to_rad;
	float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
	float angle2_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad * (1.0 - flatness);
	vec3 direction_xz = vec3(sin(angle1_rad), 0.0, cos(angle1_rad));
	vec3 direction_yz = vec3(0.0, sin(angle2_rad), cos(angle2_rad));
	direction_yz.z = direction_yz.z / max(0.0001,sqrt(abs(direction_yz.z))); // better uniform distribution
	vec3 spread_direction = vec3(direction_xz.x * direction_yz.z, direction_yz.y, direction_xz.z * direction_yz.z);
	vec3 direction_nrm = length(direction) > 0.0 ? normalize(direction) : vec3(0.0, 0.0, 1.0);
	// rotate spread to direction
	vec3 binormal = cross(vec3(0.0, 1.0, 0.0), direction_nrm);
	if (length(binormal) < 0.0001) {
		// direction is parallel to Y. Choose Z as the binormal.
		binormal = vec3(0.0, 0.0, 1.0);
	}
	binormal = normalize(binormal);
	vec3 normal = cross(binormal, direction_nrm);
	spread_direction = binormal * spread_direction.x + normal * spread_direction.y + direction_nrm * spread_direction.z;
	return spread_direction;
}
vec3 process_radial_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform, float delta){
	vec3 radial_displacement = vec3(0.0);
	if (delta < 0.001){
		return radial_displacement;
	}
	float radial_displacement_multiplier = 1.0;
	vec3 global_pivot = (emission_transform * vec4(velocity_pivot, 1.0)).xyz;
	if(length(transform[3].xyz - global_pivot) > 0.01){
		radial_displacement = normalize(transform[3].xyz - global_pivot) * radial_displacement_multiplier * param.radial_velocity;
	}else{radial_displacement = get_random_direction_from_spread(alt_seed, 360.0)* param.radial_velocity;} 
	if (radial_displacement_multiplier * param.radial_velocity < 0.0){
 // Prevent inwards velocity to flicker once the point is reached.		if (length(radial_displacement) > 0.01){
		radial_displacement = normalize(radial_displacement) * min(abs((radial_displacement_multiplier * param.radial_velocity)), length(transform[3].xyz - global_pivot) / delta);
		}
	
	return radial_displacement;
}

void process_physical_parameters(inout PhysicalParameters params, float lifetime_percent){
	
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	// reset alt seed?
	// alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);
   process_display_param(params, 0.0);
	if (rand_from_seed(alt_seed) > AMOUNT_RATIO) {
		ACTIVE = false;
	}
	
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	
	if (RESTART_CUSTOM){
		CUSTOM = vec4(0.);
		CUSTOM.w = params.lifetime;
		CUSTOM.x = dynamic_params.angle;
	}
	if (RESTART_COLOR){
		COLOR = params.color;
	}
	if (RESTART_ROT_SCALE) {
		TRANSFORM[0].xyz = vec3(1.0, 0.0, 0.0);
		TRANSFORM[1].xyz = vec3(0.0, 1.0, 0.0);
		TRANSFORM[2].xyz = vec3(0.0, 0.0, 1.0);
	}

	if (RESTART_POSITION) {
		TRANSFORM[3].xyz = calculate_initial_position(alt_seed);
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}
	if (RESTART_VELOCITY) {
		VELOCITY = get_random_direction_from_spread(alt_seed, spread) * dynamic_params.initial_velocity_multiplier;
		}
	process_display_param(params, 0.);
//	process_dynamic_parameters(dynamic_params, 0., alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	VELOCITY += EMITTER_VELOCITY * inherit_emitter_velocity_ratio;
}

void process() {
	uint base_number = NUMBER;
//	if (repeatable){
//		base_number = INDEX;
//	}
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	CUSTOM.y = mix(CUSTOM.y, 1.0, INTERPOLATE_TO_END);
	float lifetime_percent = CUSTOM.y/ params.lifetime;
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
	
	
	
	// will use this later to calculate final displacement and orient the particle.
	vec3 starting_position = TRANSFORM[3].xyz;
	vec3 controlled_displacement = vec3(0.0);
	
//	VELOCITY += process_physics_parameters(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	
	// calculate all velocity
	
	controlled_displacement += process_radial_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	
	
	process_physical_parameters(physics_params, lifetime_percent);
	vec3 force;
	{
		// copied from previous version
		vec3 pos = TRANSFORM[3].xyz;
		force = gravity;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * physics_params.linear_accel : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * physics_params.radial_accel : vec3(0.0);
		// apply tangential acceleration;
		float tangent_accel_val = physics_params.tangent_accel;
		vec3 crossDiff = cross(normalize(diff), normalize(gravity));
		force += length(crossDiff) > 0.0 ? normalize(crossDiff) * tangent_accel_val : vec3(0.0);
		force += ATTRACTOR_FORCE;

		// apply attractor forces
		VELOCITY += force * DELTA;
	}
	{
		// copied from previous version
		if (physics_params.damping > 0.0) {
			float v = length(VELOCITY);
			v -= physics_params.damping * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		
	}
	
	
	// turbulence before limiting
	vec3 final_velocity = controlled_displacement + VELOCITY;
	
	// limit velocity
	
	TRANSFORM[3].xyz += final_velocity * DELTA;
	
	
	process_display_param(params, lifetime_percent);
	
	float base_angle = dynamic_params.angle;
	base_angle += CUSTOM.y * LIFETIME * dynamic_params.angular_velocity;
	CUSTOM.x = base_angle * degree_to_rad;
   COLOR = params.color;
	TRANSFORM[0].xyz = normalize(TRANSFORM[0].xyz);
	TRANSFORM[1].xyz = normalize(TRANSFORM[1].xyz);
	TRANSFORM[2].xyz = normalize(TRANSFORM[2].xyz);
//	params.scale *= length(final_velocity)/100.0;

	TRANSFORM[0].xyz *= sign(params.scale.x) * max(abs(params.scale.x), 0.001);
	TRANSFORM[1].xyz *= sign(params.scale.y) * max(abs(params.scale.y), 0.001);
	TRANSFORM[2].xyz *= sign(params.scale.z) * max(abs(params.scale.z), 0.001);
	
	// 
	CUSTOM.z = params.animation_offset + lifetime_percent * params.animation_speed;
	
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
}

"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ubb4t"]
shader = SubResource("Shader_8kpqr")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 80.0
shader_parameter/flatness = 0.0
shader_parameter/inherit_emitter_velocity_ratio = 0.0
shader_parameter/initial_linear_velocity_min = 0.0
shader_parameter/initial_linear_velocity_max = 0.0
shader_parameter/directional_velocity_min = 1.0
shader_parameter/directional_velocity_max = 1.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/radial_velocity_min = 0.0
shader_parameter/radial_velocity_max = 0.0
shader_parameter/linear_accel_min = 0.0
shader_parameter/linear_accel_max = 1.04
shader_parameter/radial_accel_min = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_min = 0.175
shader_parameter/tangent_accel_max = 0.61
shader_parameter/damping_min = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/scale_min = 1.0
shader_parameter/scale_max = 3.635
shader_parameter/hue_variation_min = 0.0
shader_parameter/hue_variation_max = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/emission_shape_offset = Vector3(0, 0.295, 0)
shader_parameter/emission_shape_scale = Vector3(1, 1, 1)
shader_parameter/velocity_pivot = Vector3(0, 0, 0)
shader_parameter/emission_sphere_radius = 1.92
shader_parameter/color_value = Color(0.3, 0.2, 0.2, 1)
shader_parameter/gravity = Vector3(0, 3, 0)
shader_parameter/scale_curve = ExtResource("2_ill44")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_trlph"]
particle_flag_align_y = true
emission_shape_scale = Vector3(1.2, 1.2, 1.2)
emission_shape = 3
emission_box_extents = Vector3(0.5, 0, 0.5)
velocity_pivot = Vector3(0, 1, 0)
direction = Vector3(0, 1, 0)
initial_velocity_max = 1.0
gravity = Vector3(0, 0, 0)
scale_min = 2.0
scale_max = 2.0
color = Color(1.61961, 1.08235, 1.08235, 1)

[node name="StaticFlame" instance=ExtResource("1_gbf77")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.22627, 0)
amount = 24
process_material = SubResource("ShaderMaterial_7t2qm")

[node name="Smoke" parent="." index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.283866, 0)
process_material = SubResource("ShaderMaterial_ubb4t")

[node name="GPUParticles3D" parent="." index="1"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.72318, 0)
amount = 48
lifetime = 0.5
process_material = SubResource("ParticleProcessMaterial_trlph")
